import argparse
import yaml

def get_default_args():
    parser = argparse.ArgumentParser(description='General argument parse')
    
    parser.add_argument('--module-model', type=str, default="model")
    parser.add_argument('--module-config', type=str, default="config")
    parser.add_argument('--batch-size', type=int, default=1)
    parser.add_argument('--epochs', type=int, default=50)
    parser.add_argument('--no-best-epochs', type=int, default=5)
    parser.add_argument('--sampler', type=str, default='None')
    parser.add_argument('--lr', type=float, default=0.0001)
    parser.add_argument('--lr-decay-factor', type=float, default=-1.0)
    parser.add_argument('--l2-penalty', type=float, default=-1.0)
    parser.add_argument('--eps', type=float, default=1e-8)
    parser.add_argument('--grad-clip-norm', type=float, default=-1.0)
    parser.add_argument('--lr-scheduler-type', type=int, default=0)
    parser.add_argument('--no-cuda', action='store_true', default=False)
    parser.add_argument('--seed', type=int, default=1)
    parser.add_argument('--eval-mode-for-validation', action='store_true', default=False)
    parser.add_argument('--model-forward-with-target', action='store_true', default=False)
    parser.add_argument('--model-forward-with-file-name', action='store_true', default=False)
    parser.add_argument('--shuffle', action='store_false', default=True)
    parser.add_argument('--num-workers', type=int, default=0)
    parser.add_argument('--multi-gpu-data-parallel', action='store_true', default=False)
    parser.add_argument('--way-to-merge-datasets', type=str, default='concatenate')
    parser.add_argument('--save-model-dir', type=str, default="./")
    parser.add_argument('--not-save-each-epoch', action='store_true', default=False)
    parser.add_argument('--save-epoch-name', type=str, default="epoch")
    parser.add_argument('--save-trained-name', type=str, default="trained_network")
    parser.add_argument('--save-model-ext', type=str, default=".pt")
    parser.add_argument('--trained-model', type=str, default="")
    parser.add_argument('--ignore-training-history-in-trained-model', action='store_true', default=False)
    parser.add_argument('--ignore-optimizer-statistics-in-trained-model', action='store_true', default=False)
    parser.add_argument('--inference', action='store_true', default=False)
    parser.add_argument('--output-dir', type=str, default="./output")
    parser.add_argument('--optimizer', type=str, default='Adam')
    parser.add_argument('--verbose', type=int, default=1)
    parser.add_argument('--temp-flag', type=str, default='')
    parser.add_argument('--temp-flag-dev', type=str, default='')
    parser.add_argument('--dev-flag', action='store_true', default=False)
    parser.add_argument('--cudnn-deterministic-toggle', action='store_false', default=True)
    parser.add_argument('--cudnn-benchmark-toggle', action='store_true', default=False)
    parser.add_argument('--uncertainty-weight', action='store_true', default=False)
    parser.add_argument('--loss-weight', choices=['none', 'uncertainty', 'dwa'], default='none')
    parser.add_argument('--loss-weight-hyper', type=float, default=2.0)
    parser.add_argument('--PCGrad', action='store_true', default=False)
    parser.add_argument('--ssl-finetune', action='store_true', default=False)
    parser.add_argument('--hidden-feature-selection', choices=['all', 'last'], default='all')
    parser.add_argument('--single-task', action='store_true', default=False)
    parser.add_argument('--task-id', choices=['1', '2', '4', '8', '16', 'utt'], default='utt')
    parser.add_argument('--multi-scale-active', type=str, nargs='+', default=['2', '4','8','16', '32', '64', 'utt'])
    parser.add_argument('--multi-branch-fix', type=str, nargs='+', default="")
    parser.add_argument('--data-type', choices=['partialspoof', 'asvspoof'], default='partialspoof')
    parser.add_argument('--save-output', type=str, nargs='+', default=['ali'])

    args = parser.parse_args([])
    return vars(args)

default_args = get_default_args()

with open('config.yml', 'w') as file:
    yaml.dump(default_args, file, default_flow_style=False)